buildscript {
  ext {
    novaVersion = 'edge'
    springBootVersion = '2.6.0'
    autoServiceVersion = '1.0-rc7'
    freefairVersion = '6.3.0'
    springDocVersion = '1.5.10'
  }
}

plugins {
  id 'base'
  id 'io.spring.nohttp' version '0.0.9'
//  id 'com.palantir.graal' version '0.7.2' apply false
  id 'com.github.spotbugs' version '4.7.10' apply false
  id 'io.freefair.lombok' version "${freefairVersion}" // apply, because javadoc
  id 'org.hibernate.orm' version '5.5.7.Final' apply false
  id 'io.freefair.git-version' version "${freefairVersion}"
  id 'com.github.jk1.dependency-license-report' version '2.0'
  id 'com.github.johnrengelman.shadow' version '7.1.0' apply false
  id 'org.springframework.experimental.aot' version '0.10.5' apply false
  id 'org.springframework.boot' version "${springBootVersion}" apply false
  id 'io.spring.dependency-management' version '1.0.11.RELEASE' apply false
//io.freefair.maven-optional
}

if (version.toString().endsWith('SNAPSHOT') || version.toString().isBlank()) {
  version = 'edge'
} else if (version.toString().startsWith('v')) {
  version = version.toString().substring(1)
}

allprojects {
  group('de.m4rc3l.luna')

  repositories {
    mavenCentral {
      content {
        excludeGroup('net.getnova.framework')
      }
    }
    maven {
      url 'https://mvn.m4rc3l.de'
      content {
        includeGroup('net.getnova.framework')
      }
    }
    maven { url 'https://repo.spring.io/release' }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
  }
}

subprojects {
  version rootProject.version

  apply plugin: 'java'
  apply plugin: 'io.freefair.lombok'
  apply plugin: 'checkstyle'
  apply plugin: 'pmd'
  apply plugin: 'com.github.spotbugs'
  apply plugin: 'io.spring.dependency-management'

  sourceCompatibility = JavaVersion.VERSION_16
  targetCompatibility = JavaVersion.VERSION_16

  dependencyManagement {
    imports {
      mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }
  }

  tasks.withType(Jar) {
    from "${rootDir}/LICENSE"
    manifest.attributes([
      'Specification-Title'     : project.name,
      'Specification-Version'   : project.version,
      'Specification-Vendor'    : 'Marcel Coding (https://github.com/MarcelCoding)',
      'Implementation-Title'    : project.name,
      'Implementation-Version'  : project.version,
      'Implementation-Vendor'   : 'Marcel Coding (https://github.com/MarcelCoding)',
      'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
    ])
  }

  tasks.withType(JavaCompile) {
    doFirst {
      options.encoding = 'UTF-8'
      // Java Modularity:
      // options.compilerArgs.addAll(['--module-path', classpath.asPath])
    }
  }

  lombok {
    config.put('lombok.equalsandhashcode.callsuper', 'CALL')
    config.put('lombok.tostring.callsuper', 'CALL')
  }

  tasks.withType(Checkstyle) {
    exclude('**/module-info.java')
    ignoreFailures = true
    reports {
      xml.enabled(true)
      html.enabled(false)
    }
  }

  checkstyleMain {
    configFile = file("${rootDir}/config/checkstyle/main.xml")
  }

  checkstyleTest {
    configFile = file("${rootDir}/config/checkstyle/test.xml")
  }

  tasks.withType(Pmd) {
    ignoreFailures = true
    reports {
      xml.enabled(true)
      html.enabled(false)
    }
  }

  spotbugs {
    ignoreFailures = true
  }

  test {
    useJUnitPlatform()
  }

  jar {
    preserveFileTimestamps false
    reproducibleFileOrder true
  }
}
